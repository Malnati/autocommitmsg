#!/bin/bash
# Script: auto-commit-msg/etc/commit-msg
# Author: Ricardo Malnati
# Creation Date: 2023-10-10
# Description: To analyze the commit content and suggest a semantic versioning message.
# Dependencies: curl, jq

if [ ! -f ~/.autocommitmsg.enc ]; then
    echo "~/.autocommitmsg.enc not found!"
    exit 1
fi

# Check if ~/.autocommitmsgrc exists and has YOUR-PHRASE-HERE
if [ ! -f ~/.autocommitmsgrc ]; then
    echo '~/.autocommitmsgrc not found'
    exit 1
fi

if ! grep -q "PASSPHRASE" ~/.autocommitmsgrc; then
    echo 'PASSPHRASE not found at ~/.autocommitmsgrc!' 
    echo 'Use: `auto-commit-msg -c` to configure it!'
    exit 1
fi

if ! grep -q "LANGUAGE" ~/.autocommitmsgrc; then
    echo 'LANGUAGE not found at ~/.autocommitmsgrc'
    exit 1
fi

# Set API Key
source ~/.autocommitmsgrc

API_KEY=$(echo $PASSPHRASE | openssl enc -aes-256-cbc -d -pbkdf2 -in ~/.autocommitmsg.enc -pass stdin)

if [ -z "$API_KEY" ]; then
    echo "Error: API Key not set. Exiting."
    exit 1
fi

if [ -z "$PREFERED_LANGUAGE" ]; then
    echo "Error: PREFERED_LANGUAGE not set. Exiting."
    exit 1
fi

# Verify if required utilities are installed
for util in curl jq; do
    if ! command -v $util &> /dev/null; then
        echo "Error: $util is not installed. Exiting." 
        exit 1
    fi
done

# File where the commit message is stored
COMMIT_MSG_FILE="$1"
if [ -z "$COMMIT_MSG_FILE" ]; then
    echo "Error: Commit message file not provided."
    exit 1
fi

# Capture the original commit message
ORIGINAL_COMMIT_MSG=$(cat "$COMMIT_MSG_FILE" 2>/dev/null)
if [ $? -ne 0 ]; then 
    echo "Error: Could not read commit message file at: $COMMIT_MSG_FILE"
    exit 1
fi

# Verify API Key by making a simple API call
API_TEST=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $API_KEY" "https://api.openai.com/v1/engines")
if [ "$API_TEST" -ne 200 ]; then
  echo "Error: Invalid API Key. Exiting."
  exit 1
fi 

# Capture the changes staged for commit
DIFF_OUTPUT=$(git diff --cached --diff-filter=CMRTUXB)

DEFAULT_MODEL="gpt-3.5-turbo-16k"

# Prepare the JSON payload using jq
JSON_DIFF_OUTPUT_PAYLOAD=$(jq -n \
                  --arg model $DEFAULT_MODEL \
                  --arg sys_content "You are a helpful system programmed to generate a commit message based on git diff output. Please provide the commit message with maximun of 4096 characteres." \
                  --arg user_content "PREFERED_LANGUAGE=$PREFERED_LANGUAGE, Based on the following git diff output, identify and describe the changes in the PREFERED_LANGUAGE to define the commit message: $DIFF_OUTPUT" \
                  '{model: $model, messages: [{role: "system", content: $sys_content}, {role: "user", content: $user_content}]}')

# Make an API call to ChatGPT for analysis
API_FROM_DIFF_OUTPUT_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -H "Authorization: Bearer $API_KEY" \
    -H "Content-Type: application/json" \
    -d "$JSON_DIFF_OUTPUT_PAYLOAD" \
    "https://api.openai.com/v1/chat/completions")

# Extract the commit message from the API response
DESCRIPTON_4096_SUGGESTION=$(echo "$API_FROM_DIFF_OUTPUT_RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null)

# Update the commit message
echo $DESCRIPTON_4096_SUGGESTION > $COMMIT_MSG_FILE

exit 0
