#!/bin/bash
# Script: auto-commit-msg/usr/local/bin/auto-commit-msg
# Author: Ricardo Malnati
# Creation Date: 2023-10-10
# Description: To configure the auto-commit-msg util which analyzes the commit content and suggest a semantic versioning message.
# Dependencies: curl, jq

# Function to display help
show_help() {
    echo "Usage: auto-commit-msg [OPTION]"
    echo "  -i [path]    Install the commit-msg hook in the specified Git project path."
    echo "  -u [path]    Update the commit-msg hook in the specified Git project path."
    echo "  -c           Configure OpenAI API Key."
    echo "  -h           Display this help and exit."
}

# Function to configure OpenAI API Key
configure_api_key() {
    # Prompt for OpenAI API key
    echo "Please enter your OpenAI API key:"
    read -s API_KEY

    # Retry mechanism for API Key validation
    retry_count=0
    max_retries=3

    while [ $retry_count -lt $max_retries ]; do
        API_TEST=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $API_KEY" "https://api.openai.com/v1/engines")
        if [ "$API_TEST" -eq 200 ]; then
            break
        else
            echo "Invalid API Key. You have $((max_retries - retry_count)) attempts left."
            read -s -p "Please re-enter your OpenAI API key: " API_KEY
            ((retry_count++))
        fi
    done

    if [ $retry_count -eq $max_retries ]; then
        echo "Max retries reached. Exiting."
        exit 1
    fi

    # Generate a random passphrase using SHA-256
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        PASSPHRASE=$(openssl rand -hex 16 | sha256sum | awk '{print $1}')
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        PASSPHRASE=$(openssl rand -hex 16 | shasum -a 256 | awk '{print $1}')
    else
        echo "Error: Unsupported operating system. Exiting."
        exit 1
    fi

    # Encrypt the API key
    echo -n "$API_KEY" | openssl enc -aes-256-cbc -pbkdf2 -out ~/.autocommitmsg.enc -pass pass:$PASSPHRASE

    # Update the commit-msg script with the passphrase
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "s|YOUR-PHRASE-HERE|$PASSPHRASE|" ~/.autocommitmsgrc
    else
        sed -i "s|YOUR-PHRASE-HERE|$PASSPHRASE|" ~/.autocommitmsgrc
    fi

    # Prompt for prefered language
    echo "Please enter your prefered language to address questions agains OpenAI API:"
    echo 'English or any other language name in English, for example Portuguese, Spanish, French, Dutch, etc.' 
    read -s LANGUAGE

    if ! grep -q "LANGUAGE" ~/.autocommitmsgrc; then
        echo 'LANGUAGE=English  # or any other language name in English, example Portuguese, Spanish, French, Dutch' >> ~/.autocommitmsgrc
    fi
}

# Function to install or update commit-msg
install_or_update_hook() {

    # Check if ~/.autocommitmsgrc exists and has YOUR-PHRASE-HERE
    if [ -f ~/.autocommitmsgrc ]; then
        if ! grep -q "PASSPHRASE" ~/.autocommitmsgrc; then
            echo 'PASSPHRASE=YOUR-PHRASE-HERE' >> ~/.autocommitmsgrc
        fi
        if ! grep -q "LANGUAGE" ~/.autocommitmsgrc; then
            echo 'LANGUAGE=English  # or any other language name in English, example Portuguese, Spanish, French, Dutch' >> ~/.autocommitmsgrc
        fi
    else
        echo 'PASSPHRASE=YOUR-PHRASE-HERE' >> ~/.autocommitmsgrc
        echo 'LANGUAGE=English  # or any other language name in English, example Portuguese, Spanish, French, Dutch' >> ~/.autocommitmsgrc
    fi

    if [ -f ~/.autocommitmsg.enc ]; then
        echo "~/.autocommitmsg.enc found!"
    else
        configure_api_key
    fi

    mkdir -p /etc/autocommitmsg
    cp auto-commit-msg/usr/local/bin/commit-msg /etc/autocommitmsg
    chmod +x /etc/autocommitmsg/commit-msg
    echo "/etc/autocommitmsg updated!"

    local action=$1
    local path=$2
    if [ ! -d "$path/.git" ]; then
        echo "Error: No .git directory found in $path. Exiting."
        exit 1
    fi
    cp /etc/autocommitmsg/commit-msg $path/.git/hooks/
    chmod +x $path/.git/hooks/commit-msg
    echo "$action commit-msg hook in $path."
}

if [ "$EUID" -ne 0 ]; then
    echo "Please run as root."
    exit 1
fi

wget -q --spider http://google.com
if [ $? -ne 0 ]; then
    echo "No internet connection. Exiting."
    exit 1
fi

# Check for required utilities and install if not found
for util in openssl curl jq; do
    if ! command -v $util &> /dev/null; then
        echo "Warning: $util is not installed."
        echo "Attempting to install $util..."
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt-get update
            sudo apt-get install -y $util
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install $util
        else
            echo "Error: Failed to install $util. Exiting."
            exit 1
        fi
    fi
done

# Main function to handle options
while getopts ":i:u:ch" opt; do
    case $opt in
        i)
            install_or_update_hook "Installed" "$OPTARG"
            ;;
        u)
            install_or_update_hook "Updated" "$OPTARG"
            ;;
        c)
            configure_api_key
            ;;
        h)
            show_help
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

# If no options are passed, show help
if [ $OPTIND -eq 1 ]; then
    show_help
fi
