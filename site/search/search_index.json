{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Auto Commit Msg Description This repository contains a Bash script designed to analyze the content of a Git commit and automatically suggest a semantic versioning message. It utilizes OpenAI's GPT-3.5 Turbo engine to generate the commit message based on the changes staged for commit. Features Checks for required utilities (curl, jq) Verifies API Key Analyzes staged changes for commit Generates a semantic versioning commit message Dependencies curl jq Installation and Setup For instructions on how to generate the required API key and set up this script as a Git hook, please refer to the INSTALL.md file. Usage ./auto-commit-msg/usr/local/bin/auto-commit-msg [COMMIT_MSG_FILE] Author Ricardo Malnati License This project is licensed under the MIT License - see the LICENSE.md file for details. Hashtags Git CommitMessage SemanticVersioning OpenAI GPT-3.5 BashScript","title":"Auto Commit Msg"},{"location":"#auto-commit-msg","text":"","title":"Auto Commit Msg"},{"location":"#description","text":"This repository contains a Bash script designed to analyze the content of a Git commit and automatically suggest a semantic versioning message. It utilizes OpenAI's GPT-3.5 Turbo engine to generate the commit message based on the changes staged for commit.","title":"Description"},{"location":"#features","text":"Checks for required utilities (curl, jq) Verifies API Key Analyzes staged changes for commit Generates a semantic versioning commit message","title":"Features"},{"location":"#dependencies","text":"curl jq","title":"Dependencies"},{"location":"#installation-and-setup","text":"For instructions on how to generate the required API key and set up this script as a Git hook, please refer to the INSTALL.md file.","title":"Installation and Setup"},{"location":"#usage","text":"./auto-commit-msg/usr/local/bin/auto-commit-msg [COMMIT_MSG_FILE]","title":"Usage"},{"location":"#author","text":"Ricardo Malnati","title":"Author"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details.","title":"License"},{"location":"#hashtags","text":"","title":"Hashtags"},{"location":"#git","text":"","title":"Git"},{"location":"#commitmessage","text":"","title":"CommitMessage"},{"location":"#semanticversioning","text":"","title":"SemanticVersioning"},{"location":"#openai","text":"","title":"OpenAI"},{"location":"#gpt-35","text":"","title":"GPT-3.5"},{"location":"#bashscript","text":"","title":"BashScript"},{"location":"CONTRIBUTING/","text":"Contributing to auto-commit-msg Table of Contents Code of Conduct Getting Started How to Contribute Pull Request Process Code Style Code of Conduct Please read and follow our Code of Conduct . Getting Started Fork the repository on GitHub. Clone your fork locally ( git clone https://github.com/your-username/auto-commit-msg.git ). Create a new branch ( git checkout -b new-feature ). How to Contribute Make sure you have installed all the necessary dependencies. Make your changes in the new branch. Test your changes. Commit your changes ( git commit -m 'Add new feature' ). Push to the branch ( git push origin new-feature ). Create a new Pull Request. Pull Request Process Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations, and container parameters. Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. Code Style Please adhere to the coding style defined in the project. Consistency is key. Thank you for contributing to auto-commit-msg!","title":"Contributing to auto-commit-msg"},{"location":"CONTRIBUTING/#contributing-to-auto-commit-msg","text":"","title":"Contributing to auto-commit-msg"},{"location":"CONTRIBUTING/#table-of-contents","text":"Code of Conduct Getting Started How to Contribute Pull Request Process Code Style","title":"Table of Contents"},{"location":"CONTRIBUTING/#code-of-conduct","text":"Please read and follow our Code of Conduct .","title":"Code of Conduct"},{"location":"CONTRIBUTING/#getting-started","text":"Fork the repository on GitHub. Clone your fork locally ( git clone https://github.com/your-username/auto-commit-msg.git ). Create a new branch ( git checkout -b new-feature ).","title":"Getting Started"},{"location":"CONTRIBUTING/#how-to-contribute","text":"Make sure you have installed all the necessary dependencies. Make your changes in the new branch. Test your changes. Commit your changes ( git commit -m 'Add new feature' ). Push to the branch ( git push origin new-feature ). Create a new Pull Request.","title":"How to Contribute"},{"location":"CONTRIBUTING/#pull-request-process","text":"Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations, and container parameters. Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent.","title":"Pull Request Process"},{"location":"CONTRIBUTING/#code-style","text":"Please adhere to the coding style defined in the project. Consistency is key. Thank you for contributing to auto-commit-msg!","title":"Code Style"},{"location":"INSTALL/","text":"Installation Guide for Auto Commit Msg Table of Contents Prerequisites Generating API Key Encrypting API Key Setting Up as Git Hook Automated Installation Prerequisites Ensure the following utilities are installed: OpenSSL curl jq Generating API Key Navigate to OpenAI's Developer Dashboard : Go to OpenAI Developer Dashboard and sign up or log in. Create a New API Key : Once logged in, click on \"API Keys\" in the sidebar and then click on \"Create API Key\". Set Permissions : Choose the permissions you need. For this script, a basic permission should suffice. Generate and Copy : Click on \"Generate\" and copy the generated API key. Encrypting API Key Encrypt the API Key After generating the API key, encrypt it using OpenSSL with the following command: echo -n \"Your-Actual-API-Key-Here\" | openssl enc -aes-256-cbc -pbkdf2 -out api_key.enc You'll be prompted to enter a passphrase. Remember this passphrase, as you'll need it to decrypt the key later. Update .gitignore To ensure the encrypted API key file is not committed to the repository, add the following line to your .gitignore : # encrypted file *.enc For more details on .gitignore , you can refer to the official documentation . Setting Up as Git Hook Navigate to Your Repository : Open your terminal and navigate to your local Git repository. Copy the Script : Move the auto_commit_msg script to the hooks directory and rename it to commit-msg . bash cp ./auto-commit-msg/usr/local/bin/auto-commit-msg .git/hooks/commit-msg Make it Executable : Change the script permissions to make it executable. bash chmod +x .git/hooks/commit-msg Update the Script : Open the commit-msg script and replace the PASSPHRASE placeholder with the passphrase you used to encrypt the API key. bash PASSPHRASE=\"YOUR-PHRASE-HERE\" For more details on Git hooks, you can refer to the official documentation . Automated Installation For an automated installation process, you can use the installer.sh script. This script will handle the API key encryption and Git hook setup for you. To use this installer: Download the installer.sh script. Make the script executable with chmod +x installer.sh . Run the script with ./installer.sh .","title":"Installation Guide for Auto Commit Msg"},{"location":"INSTALL/#installation-guide-for-auto-commit-msg","text":"","title":"Installation Guide for Auto Commit Msg"},{"location":"INSTALL/#table-of-contents","text":"Prerequisites Generating API Key Encrypting API Key Setting Up as Git Hook Automated Installation","title":"Table of Contents"},{"location":"INSTALL/#prerequisites","text":"Ensure the following utilities are installed: OpenSSL curl jq","title":"Prerequisites"},{"location":"INSTALL/#generating-api-key","text":"Navigate to OpenAI's Developer Dashboard : Go to OpenAI Developer Dashboard and sign up or log in. Create a New API Key : Once logged in, click on \"API Keys\" in the sidebar and then click on \"Create API Key\". Set Permissions : Choose the permissions you need. For this script, a basic permission should suffice. Generate and Copy : Click on \"Generate\" and copy the generated API key.","title":"Generating API Key"},{"location":"INSTALL/#encrypting-api-key","text":"","title":"Encrypting API Key"},{"location":"INSTALL/#encrypt-the-api-key","text":"After generating the API key, encrypt it using OpenSSL with the following command: echo -n \"Your-Actual-API-Key-Here\" | openssl enc -aes-256-cbc -pbkdf2 -out api_key.enc You'll be prompted to enter a passphrase. Remember this passphrase, as you'll need it to decrypt the key later.","title":"Encrypt the API Key"},{"location":"INSTALL/#update-gitignore","text":"To ensure the encrypted API key file is not committed to the repository, add the following line to your .gitignore : # encrypted file *.enc For more details on .gitignore , you can refer to the official documentation .","title":"Update .gitignore"},{"location":"INSTALL/#setting-up-as-git-hook","text":"Navigate to Your Repository : Open your terminal and navigate to your local Git repository. Copy the Script : Move the auto_commit_msg script to the hooks directory and rename it to commit-msg . bash cp ./auto-commit-msg/usr/local/bin/auto-commit-msg .git/hooks/commit-msg Make it Executable : Change the script permissions to make it executable. bash chmod +x .git/hooks/commit-msg Update the Script : Open the commit-msg script and replace the PASSPHRASE placeholder with the passphrase you used to encrypt the API key. bash PASSPHRASE=\"YOUR-PHRASE-HERE\" For more details on Git hooks, you can refer to the official documentation .","title":"Setting Up as Git Hook"},{"location":"INSTALL/#automated-installation","text":"For an automated installation process, you can use the installer.sh script. This script will handle the API key encryption and Git hook setup for you. To use this installer: Download the installer.sh script. Make the script executable with chmod +x installer.sh . Run the script with ./installer.sh .","title":"Automated Installation"},{"location":"SUPPORT/","text":"Support for auto-commit-msg Table of Contents Community Support Professional Support Reporting Issues Community Support For community support, please visit our Stack Overflow tag. Professional Support If you have a support contract, please contact our support team at support@example.com . Reporting Issues Please report bugs and issues on our GitHub Issues page. For security issues, please email security@example.com . Thank you for using auto-commit-msg!","title":"Support for auto-commit-msg"},{"location":"SUPPORT/#support-for-auto-commit-msg","text":"","title":"Support for auto-commit-msg"},{"location":"SUPPORT/#table-of-contents","text":"Community Support Professional Support Reporting Issues","title":"Table of Contents"},{"location":"SUPPORT/#community-support","text":"For community support, please visit our Stack Overflow tag.","title":"Community Support"},{"location":"SUPPORT/#professional-support","text":"If you have a support contract, please contact our support team at support@example.com .","title":"Professional Support"},{"location":"SUPPORT/#reporting-issues","text":"Please report bugs and issues on our GitHub Issues page. For security issues, please email security@example.com . Thank you for using auto-commit-msg!","title":"Reporting Issues"},{"location":"TODO/","text":"Automated Tests Tool : Use a testing framework like Bats for Bash. Implementation : Write unit tests for each function in your script. CI/CD : Integrate with a CI/CD service like GitHub Actions to run tests automatically on each commit or pull request. User Documentation Tool : Use a static site generator like MkDocs . Implementation : Create detailed guides, FAQs, and API documentation. Hosting : Host the documentation on GitHub Pages or a similar service. Versioning Tool : Use git tags for versioning. Implementation : Follow Semantic Versioning ( SemVer ) standards. Release : Automate the release process using GitHub Actions. Logging and Auditing Tool : Use syslog for Linux or logger for macOS. Implementation : Log important events and errors in the script. Audit : Periodically review logs for any anomalies or issues. Backup and Rollback Implementation : Before making changes, backup relevant files. Rollback : Implement a function to revert changes in case of failure. Multi-Language Support Tool : Use gettext or a similar localization tool. Implementation : Externalize all user-facing strings into language files. Language Selection : Allow users to select their preferred language for the script's interface. Security Measures Rate-Limiting : Implement a rate-limiting mechanism for API calls. IP Whitelisting : Allow the script to only make API calls from certain IP addresses. Encryption : Use stronger encryption algorithms for sensitive data.","title":"TODO"},{"location":"TODO/#automated-tests","text":"Tool : Use a testing framework like Bats for Bash. Implementation : Write unit tests for each function in your script. CI/CD : Integrate with a CI/CD service like GitHub Actions to run tests automatically on each commit or pull request.","title":"Automated Tests"},{"location":"TODO/#user-documentation","text":"Tool : Use a static site generator like MkDocs . Implementation : Create detailed guides, FAQs, and API documentation. Hosting : Host the documentation on GitHub Pages or a similar service.","title":"User Documentation"},{"location":"TODO/#versioning","text":"Tool : Use git tags for versioning. Implementation : Follow Semantic Versioning ( SemVer ) standards. Release : Automate the release process using GitHub Actions.","title":"Versioning"},{"location":"TODO/#logging-and-auditing","text":"Tool : Use syslog for Linux or logger for macOS. Implementation : Log important events and errors in the script. Audit : Periodically review logs for any anomalies or issues.","title":"Logging and Auditing"},{"location":"TODO/#backup-and-rollback","text":"Implementation : Before making changes, backup relevant files. Rollback : Implement a function to revert changes in case of failure.","title":"Backup and Rollback"},{"location":"TODO/#multi-language-support","text":"Tool : Use gettext or a similar localization tool. Implementation : Externalize all user-facing strings into language files. Language Selection : Allow users to select their preferred language for the script's interface.","title":"Multi-Language Support"},{"location":"TODO/#security-measures","text":"Rate-Limiting : Implement a rate-limiting mechanism for API calls. IP Whitelisting : Allow the script to only make API calls from certain IP addresses. Encryption : Use stronger encryption algorithms for sensitive data.","title":"Security Measures"},{"location":"USAGE/","text":"Certainly, Ricardo. Below is a sample USAGE.md file that outlines how developers can use the auto-commit-msg utility. Usage Guide for auto-commit-msg Table of Contents Introduction Installation Configuration Command-Line Options Error Handling Contributing Support Introduction auto-commit-msg is a utility designed to automatically generate semantic commit messages based on the content of your commits. This document aims to guide you through its usage. Installation Please refer to the INSTALL.md file for installation instructions. Configuration Before using auto-commit-msg , you need to configure it. Run the following command to start the configuration process: auto-commit-msg -c This will prompt you for your OpenAI API key and other preferences. Command-Line Options -i [path] : Install the commit-msg hook in the specified Git project directory. -u [path] : Update the commit-msg hook in the specified Git project directory. -c : Configure your OpenAI API key. -h : Display help information. --u : User-level configuration. --p : Project-level configuration. Error Handling The utility provides detailed error messages for various issues. Each error message includes: The reason for the error. Steps for the user to fix the issue. How to contribute if you believe it's a bug. How to seek community or professional support. Contributing If you would like to contribute to the project, please refer to the CONTRIBUTING.md file for guidelines. Support For professional support, please contact ricardomalnati@gmail.com . For community support, you can post questions on Stack Overflow with the tag auto-commit-msg .","title":"USAGE"},{"location":"USAGE/#usage-guide-for-auto-commit-msg","text":"","title":"Usage Guide for auto-commit-msg"},{"location":"USAGE/#table-of-contents","text":"Introduction Installation Configuration Command-Line Options Error Handling Contributing Support","title":"Table of Contents"},{"location":"USAGE/#introduction","text":"auto-commit-msg is a utility designed to automatically generate semantic commit messages based on the content of your commits. This document aims to guide you through its usage.","title":"Introduction"},{"location":"USAGE/#installation","text":"Please refer to the INSTALL.md file for installation instructions.","title":"Installation"},{"location":"USAGE/#configuration","text":"Before using auto-commit-msg , you need to configure it. Run the following command to start the configuration process: auto-commit-msg -c This will prompt you for your OpenAI API key and other preferences.","title":"Configuration"},{"location":"USAGE/#command-line-options","text":"-i [path] : Install the commit-msg hook in the specified Git project directory. -u [path] : Update the commit-msg hook in the specified Git project directory. -c : Configure your OpenAI API key. -h : Display help information. --u : User-level configuration. --p : Project-level configuration.","title":"Command-Line Options"},{"location":"USAGE/#error-handling","text":"The utility provides detailed error messages for various issues. Each error message includes: The reason for the error. Steps for the user to fix the issue. How to contribute if you believe it's a bug. How to seek community or professional support.","title":"Error Handling"},{"location":"USAGE/#contributing","text":"If you would like to contribute to the project, please refer to the CONTRIBUTING.md file for guidelines.","title":"Contributing"},{"location":"USAGE/#support","text":"For professional support, please contact ricardomalnati@gmail.com . For community support, you can post questions on Stack Overflow with the tag auto-commit-msg .","title":"Support"}]}